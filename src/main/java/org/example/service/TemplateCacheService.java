package org.example.service;

import ai.djl.inference.Predictor;
import jakarta.annotation.PostConstruct;
import lombok.Getter;
import org.example.loader.ModelLoader;
import org.example.redis.RedisService;
import org.example.untils.CachedTemplate;
import org.example.untils.JsonSerializable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.*;

/**
 * TemplateCacheService ‚Äî —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —à–∞–±–ª–æ–Ω–∏ –≤ –ø–∞–º º—è—Ç—ñ –∑ Redis –∞–±–æ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞ (JSON),
 * —Ç–∞ –∫–µ—à—É—î —ó—Ö —É Redis –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.
 */
@Service
public class TemplateCacheService {

    private static final Logger logger = LoggerFactory.getLogger(TemplateCacheService.class);

    private final Map<String, CachedTemplate> cachedTemplates = new HashMap<>();
    private final ModelLoader modelLoader;
    private final RedisService redisService;
    private final TemplateCache templateCache;
    @Getter
    private Predictor<String, float[]> predictor;


    public TemplateCacheService(ModelLoader modelLoader,
                                RedisService redisService,
                                TemplateCache templateCache) {
        this.modelLoader = modelLoader;
        this.redisService = redisService;
        this.templateCache = templateCache;
    }

    /**
     * –ú–µ—Ç–æ–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —à–∞–±–ª–æ–Ω–∏ –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É.
     * –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–∏ —É Redis ‚Äî –≤–æ–Ω–∏ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑—É—é—Ç—å—Å—è —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è.
     * –Ø–∫—â–æ Redis –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ Redis.
     */
    @PostConstruct
    public void init() {
        try {
            predictor = modelLoader.newPredictor();
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —à–∞–±–ª–æ–Ω—ñ–≤ —É Redis
            String firstTemplate = redisService.getData("Templates-0");
            if (firstTemplate != null && !firstTemplate.isBlank() && !"null".equalsIgnoreCase(firstTemplate)) {
                logger.info("üîÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –∑ Redis...");
                loadFromRedis();
            } else {
                logger.info("üÜï –ö–µ—à—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –∑ JSON...");
                buildAndCacheTemplates();
            }
        } catch (Exception e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —à–∞–±–ª–æ–Ω—ñ–≤: {}", e.getMessage(), e);
        }
    }

    private void loadFromRedis() {
        int index = 0;
        String key;
        String data;
        do {
            key = "Templates-" + index;
            data = redisService.getData(key);
            if (data != null && !data.isBlank() && !"null".equalsIgnoreCase(data)) {
                CachedTemplate cachedTemplate = JsonSerializable.fromJson(data, CachedTemplate.class);
                cachedTemplates.put(key, cachedTemplate);
                logger.info("‚úÖ –®–∞–±–ª–æ–Ω #{} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {} —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤", index, cachedTemplate.getEmbeddings().size());
                index++;
            }
        } while (data != null && !data.isBlank() && !"null".equalsIgnoreCase(data));
    }

    private void buildAndCacheTemplates() throws Exception {
        Map<String, Map<String, String>> allTemplates = templateCache.getTemplates();
        int index = 0;

        for (Map.Entry<String, Map<String, String>> entry : allTemplates.entrySet()) {
            String fileName = entry.getKey();
            Map<String, String> jsonModel = entry.getValue();

            // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ —à–∞–±–ª–æ–Ω —É–∂–µ –≤ –∫–µ—à—ñ
            if (cachedTemplates.containsKey(fileName)) continue;

            Map<String, List<String>> fragmentsMap = new HashMap<>();
            Map<String, List<float[]>> embeddingsMap = new HashMap<>();

            for (var e : jsonModel.entrySet()) {
                List<String> fragments = List.of(e.getValue().split("[.!?\\n]"));
                List<float[]> embeddings = new ArrayList<>();
                for (String fragment : fragments) {
                    fragment = fragment.trim();
                    if (!fragment.isEmpty()) {
                        embeddings.add(predictor.predict(fragment));
                    }
                }
                fragmentsMap.put(e.getKey(), fragments);
                embeddingsMap.put(e.getKey(), embeddings);
            }

            CachedTemplate cachedTemplate = new CachedTemplate(fragmentsMap, embeddingsMap);
            String redisKey = "Templates-" + index;
            cachedTemplates.put(redisKey, cachedTemplate);
            redisService.saveData(redisKey, cachedTemplate.getJson());
            logger.info("üì¶ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —à–∞–±–ª–æ–Ω —É Redis: {}", redisKey);
            index++;
        }
    }

    public Map<String, CachedTemplate> getTemplates() {
        return cachedTemplates;
    }

    public CachedTemplate getTemplate(String templateName) {
        return cachedTemplates.get(templateName);
    }

    public void addTemplate(String templateName, CachedTemplate template) {
        cachedTemplates.put(templateName, template);
    }

    public boolean containsTemplate(String templateName) {
        return cachedTemplates.containsKey(templateName);
    }
}
