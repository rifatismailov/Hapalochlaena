package org.example.analysis;

import org.example.ErrorResponse;
import org.example.controller.DocumentController;
import org.example.redis.RedisService;
import org.example.service.MatcherServiceAsync;
import org.example.untils.DocRequest;
import org.example.untils.DocRequestUtils;
import org.example.untils.JsonSerializable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.concurrent.RejectedExecutionException;


/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤, –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤, —Ç–∞ –ø–µ—Ä–µ–¥–∞—á—ñ —ó—Ö –Ω–∞ –∞–Ω–∞–ª—ñ–∑.
 */
@Service
public class DocumentAnalysisLauncher {
    private static final Logger logger = LoggerFactory.getLogger(DocumentController.class);

    private final MatcherServiceAsync matcherServiceAsync;
    private final ThreadPoolTaskExecutor taskExecutor;
    private final RedisService redisService;

    public DocumentAnalysisLauncher(@Qualifier("taskExecutor")ThreadPoolTaskExecutor taskExecutor,
                              RedisService redisService,
                              MatcherServiceAsync matcherServiceAsync) {
        this.taskExecutor = taskExecutor;
        this.redisService = redisService;
        this.matcherServiceAsync = matcherServiceAsync;
    }

    public ErrorResponse addTaskAsync(DocRequest request) {
        try {
            if (taskExecutor.getActiveCount() >= taskExecutor.getMaxPoolSize()) {
                logger.warn("–ü–æ—Ç–æ–∫–∏ –∑–∞–π–Ω—è—Ç—ñ. –î–æ–¥–∞—î–º–æ –≤ Redis: {}", request.getDoc());
                String jsonBody = DocRequestUtils.createJsonBody(request);
                redisService.addToLine("requestQueue", jsonBody);
            } else {
                logger.info("‚ñ∂Ô∏è –ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞: {}", request.getDoc());
                submitTask(request);
            }
        } catch (Exception e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ matchAsync: {}", e.getMessage(), e);
            return new ErrorResponse(e.getMessage(), 500);
        }
        return null;
    }

    /**
     * –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ –≤ –ø—É–ª –ø–æ—Ç–æ–∫—ñ–≤ (—ñ–∑ –∑–∞—Ö–∏—Å—Ç–æ–º).
     */
    private void submitTask(DocRequest request) {
        try {
            taskExecutor.execute(() -> {
                logger.info("üîß –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {}", request.getDoc());
                matcherServiceAsync.matchDocument(
                        request.getClientId(),
                        request.getDoc(),
                        Arrays.asList(request.getBody().split("\n"))
                );
            });
        } catch (RejectedExecutionException ex) {
            logger.warn("‚ö†Ô∏è –ü–æ—Ç—ñ–∫ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –°—Ç–∞–≤–∏–º–æ –≤ Redis: {}", request.getDoc());
            String jsonBody = DocRequestUtils.createJsonBody(request);
            redisService.addToLine("requestQueue", jsonBody);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Redis —á–µ—Ä–≥–∏ ‚Äî –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–∂–Ω—ñ 3 —Å–µ–∫—É–Ω–¥–∏.
     * –ü—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –≤—ñ–ª—å–Ω—ñ –ø–æ—Ç–æ–∫–∏.
     */
    @Scheduled(fixedDelay = 3000)
    public void pullFromRedisQueue() {
        if (taskExecutor.getActiveCount() < taskExecutor.getMaxPoolSize()) {
            String nextMessage = redisService.getOnLine("requestQueue");
            if (nextMessage != null) {
                try {
                    DocRequest docRequest = JsonSerializable.fromJson(nextMessage, DocRequest.class);
                    logger.info("üì¶ –í–∏—Ç—è–≥–Ω—É—Ç–æ –∑ Redis —á–µ—Ä–≥–∏: {}", docRequest.getDoc());
                    submitTask(docRequest);
                } catch (Exception e) {
                    logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Redis: {}", e.getMessage(), e);
                }
            }
        }
    }
}
