
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.jetbrains.annotations.NotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * <h2>DocumentControllerMockMvcTest</h2>
 * <p>
 *  Integration-test –¥–ª—è REST-–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ <code>/api/match</code>.
 *  –¢–µ—Å—Ç —á–∏—Ç–∞—î –≤—Å—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ –∑ –∫–∞—Ç–∞–ª–æ–≥—É <code>data/documents</code>,
 *  –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç —É –≤–∏–≥–ª—è–¥—ñ plain-text POST-–∑–∞–ø–∏—Ç—É –π –ø–µ—Ä–µ–≤—ñ—Ä—è—î,
 *  —â–æ —Å–µ—Ä–≤—ñ—Å –ø–æ–≤–µ—Ä—Ç–∞—î JSON –∑ –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º<br/>
 *  (<code>$.document.title</code>) —Ç–∞ —à–∞–±–ª–æ–Ω–æ–º (<code>template</code>).
 * </p>
 * <p>
 *  –î–æ–¥–∞—Ç–∫–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ª–æ–≥—É—é—Ç—å—Å—è —É –ª—é–¥–∏–Ω–æ-—á–∏—Ç–∞–±–µ–ª—å–Ω–æ–º—É (pretty-printed) —Ñ–æ—Ä–º–∞—Ç—ñ.
 * </p>
 */

@TestPropertySource("classpath:application.properties")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@AutoConfigureMockMvc
@SpringBootTest(classes = org.example.BertMatcherApplication.class)

public class DocumentControllerMockMvcTest {

    /**
     * <p>–Ü–Ω–∂–µ–∫—Ç–æ–≤–∞–Ω–∏–π <b>MockMvc</b> –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É Spring Boot.</p>
     * <ul>
     *     <li>–ï–º—ñ—Ç—É—î HTTP-–∑–∞–ø–∏—Ç–∏ –¥–æ –≤–±—É–¥–æ–≤–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –±–µ–∑ –ø—ñ–¥–Ω—è—Ç—Ç—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.</li>
     *     <li>–î–æ–∑–≤–æ–ª—è—î –æ—á—ñ–∫—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å, –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞ —Ç—ñ–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.</li>
     * </ul>
     */
    @Autowired
    private MockMvc mockMvc;

    /**
     * <p>–û–¥–∏–Ω —Å–ø—ñ–ª—å–Ω–∏–π —ñ–Ω—Å—Ç–∞–Ω—Å {@link ObjectMapper} –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É JSON-–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.</p>
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è <i>pretty printer</i> –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É —É –∫–æ–Ω—Å–æ–ª—å.
     */
    private final ObjectMapper mapper = new ObjectMapper();


    /**
     * –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ—Å—Ç.
     * <ol>
     *     <li>–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —É—Å—ñ —Ñ–∞–π–ª–∏ –≤ –∫–∞—Ç–∞–ª–æ–∑—ñ <code>data/documents</code>.</li>
     *     <li>–î–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ñ–∞–π–ª—É –≤–∏–∫–ª–∏–∫–∞—î {@link #replaceText(String)} ‚Äì –ø—Ä–∏–±–∏—Ä–∞—î –∑–∞–π–≤—ñ –ø–µ—Ä–µ–Ω–æ—Å–∏.</li>
     *     <li>–ù–∞–¥—Å–∏–ª–∞—î POST-–∑–∞–ø–∏—Ç <code>/api/match</code> —É –∫–æ–¥—É–≤–∞–Ω–Ω—ñ UTF-8.</li>
     *     <li>–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å <code>200 OK</code> —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–ª—è <code>$.document.title</code>.</li>
     *     <li>–ü–∞—Ä—Å–∏—Ç—å —Ç—ñ–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É {@link JsonNode} —Ç–∞ –ª–æ–≥—É—î <code>template</code> —ñ <code>title</code>.</li>
     * </ol>
     *
     * @throws Exception –±—É–¥—å-—è–∫—ñ –ø–æ–º–∏–ª–∫–∏ IO –∞–±–æ MockMvc
     */
    private final File folder = new File("data/documents");
    private final File[] files = folder.listFiles();

//    @Test
//    public void testDocumentWithRequestMatchingSync() throws Exception {
//
//
//        if (files == null || files.length == 0) {
//            System.out.println("‚ö†Ô∏è  –§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: data/documents");
//            return;
//        }
//
//        for (File file : files) {
//            if (!file.isFile()) continue;
//
//            String rawText = Files.readString(file.toPath(), StandardCharsets.UTF_8);
//            String preparedText = replaceText(rawText);
//
//            // üîß –°—Ç–≤–æ—Ä—é—î–º–æ JSON –¥–ª—è DocRequest
//            Map<String, String> docRequest = new HashMap<>();
//            docRequest.put("doc", file.getName());
//            docRequest.put("body", preparedText);
//            String jsonBody = mapper.writeValueAsString(docRequest);
//
//            MvcResult result = mockMvc.perform(post("/api/match/sync")
//                            .contentType(MediaType.APPLICATION_JSON)
//                            .characterEncoding("UTF-8")
//                            .content(jsonBody))
//                    .andExpect(status().isOk())
//                    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
//                    .andReturn();
//
//            // üì¶ –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
//            String response = result.getResponse().getContentAsString(StandardCharsets.UTF_8);
//            JsonNode jsonNode = mapper.readTree(response);
//
//            String title = jsonNode.at("/document/title").asText("üî¥ not_found");
//            String template = jsonNode.path("template").asText("üî¥ not_found");
//
//            System.out.println("üìù –§–∞–π–ª: " + file.getName());
//            System.out.println("   ‚ñ∂ Template: " + template);
//            System.out.println("   ‚ñ∂ Title   : " + title);
//            System.out.println("   ‚ñ∂ JSON pretty:\n" +
//                    mapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonNode));
//            System.out.println("------------------------------------------------------\n");
//        }
//    }
//
//    @Test
//    public void testDocumentWithRequestMatchingAsync() throws Exception {
//
//        if (files == null || files.length == 0) {
//            System.out.println("‚ö†Ô∏è  –§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: data/documents");
//            return;
//        }
//        for (File file : files) {
//            MvcResult result = mockMvc.perform(delete("/api/redis/delete")
//                            .param("key", file.getName())
//                            .contentType(MediaType.APPLICATION_JSON))
//                    .andExpect(status().isOk())
//                    .andReturn();
//
//            String response = result.getResponse().getContentAsString(StandardCharsets.UTF_8);
//            System.out.println("üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ Redis: " + response);
//
//
//            // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ JSON ‚Äî –º–æ–∂–Ω–∞ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏:
//            // JsonNode json = new ObjectMapper().readTree(response);
//            // System.out.println("‚ñ∂ –ü–æ–ª–µ document.title: " + json.at("/document/title").asText());
//        }
//        for (File file : files) {
//            if (!file.isFile()) continue;
//
//            String rawText = Files.readString(file.toPath(), StandardCharsets.UTF_8);
//            String preparedText = replaceText(rawText);
//
//            // üîß –°—Ç–≤–æ—Ä—é—î–º–æ JSON –¥–ª—è DocRequest
//            Map<String, String> docRequest = new HashMap<>();
//            docRequest.put("doc", file.getName());
//            docRequest.put("body", preparedText);
//            String jsonBody = mapper.writeValueAsString(docRequest);
//
//            MvcResult result = mockMvc.perform(post("/api/match/async")
//                            .contentType(MediaType.APPLICATION_JSON)
//                            .characterEncoding("UTF-8")
//                            .content(jsonBody))
//                    .andExpect(status().isOk())
//                    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
//                    .andReturn();
//
//            // üì¶ –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
//            String response = result.getResponse().getContentAsString(StandardCharsets.UTF_8);
//            System.out.println("   ‚ñ∂ response   : " + response);
//            System.out.println("------------------------------------------------------\n");
//        }
//    }
//
//
//    @Test
//    public void testDocumentWithRequestMatchingGet() throws Exception {
//
//
//        if (files == null || files.length == 0) {
//            System.out.println("‚ö†Ô∏è  –§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: data/documents");
//            return;
//        }
//
//        for (File file : files) {
//            MvcResult result = mockMvc.perform(get("/api/redis/get")
//                            .param("key", file.getName())
//                            .contentType(MediaType.APPLICATION_JSON))
//                    .andReturn(); // –Ω–µ .andExpect(status().isOk())
//
//            int status = result.getResponse().getStatus();
//            String response = result.getResponse().getContentAsString(StandardCharsets.UTF_8);
//
//            if (status == HttpStatus.OK.value()) {
//                JsonNode jsonNode = mapper.readTree(response);
//
//                String title = jsonNode.at("/document/title").asText("üî¥ not_found");
//                String template = jsonNode.path("template").asText("üî¥ not_found");
//
//                System.out.println("üìù –§–∞–π–ª: " + file.getName());
//                System.out.println("   ‚ñ∂ Template: " + template);
//                System.out.println("   ‚ñ∂ Title   : " + title);
//                System.out.println("   ‚ñ∂ JSON pretty:\n" +
//                        mapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonNode));
//                System.out.println("------------------------------------------------------\n");
//            } else if (status == HttpStatus.NOT_FOUND.value()) {
//                System.out.println("‚ö†Ô∏è –ö–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Redis: " + response);
//            } else {
//                System.out.println("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å: " + status + " ‚Üí " + response);
//            }
//
//            // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ JSON ‚Äî –º–æ–∂–Ω–∞ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏:
//            // JsonNode json = new ObjectMapper().readTree(response);
//            // System.out.println("‚ñ∂ –ü–æ–ª–µ document.title: " + json.at("/document/title").asText());
//        }
//    }

        @Test
    public void testDocumentWithRequestMatchingAsync() throws Exception {

        if (files == null || files.length == 0) {
            System.out.println("‚ö†Ô∏è  –§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: data/documents");
            return;
        }

        for (File file : files) {
            if (!file.isFile()) continue;

            String rawText = Files.readString(file.toPath(), StandardCharsets.UTF_8);
            String preparedText = replaceText(rawText);

            // üîß –°—Ç–≤–æ—Ä—é—î–º–æ JSON –¥–ª—è DocRequest
            Map<String, String> docRequest = new HashMap<>();
            docRequest.put("clientId", "insider");
            docRequest.put("doc", file.getName());
            docRequest.put("body", preparedText);
            String jsonBody = mapper.writeValueAsString(docRequest);
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è RestTemplate
            RestTemplate restTemplate = new RestTemplate();

            // URL –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ Kafka
            String url = "http://localhost:8080/api/kafka/send";

            // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫–µ —Ö–æ—á–µ—à –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏

            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
            HttpEntity<String> request = new HttpEntity<>(jsonBody, headers);

            // –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è POST-–∑–∞–ø–∏—Ç—É
            String response = restTemplate.postForObject(url, request, String.class);

            System.out.println("üì® –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞: " + response);
        }
    }

    @Test
    public void testDocumentWithRequestMatchingKafka() throws Exception {

        if (files == null || files.length == 0) {
            System.out.println("‚ö†Ô∏è  –§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: data/documents");
            return;
        }
        for (File file : files) {
            String kafkaMessage = "–§–∞–π–ª " + file.getName() + " –æ–±—Ä–æ–±–ª–µ–Ω–æ";

            MvcResult result = mockMvc.perform(post("/api/kafka/send")
                            .content("\"" + kafkaMessage + "\"") // JSON string
                            .contentType(MediaType.APPLICATION_JSON))
                    .andExpect(status().isOk())
                    .andReturn();

            String response = result.getResponse().getContentAsString(StandardCharsets.UTF_8);


        }

    }
    /**
     * <p>–ù–æ—Ä–º–∞–ª—ñ–∑—É—î —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:</p>
     * <ul>
     *     <li>—Ä—É–±—Ä–∏–∫—É—î —Ä—è–¥–∫–∏, –≤–∏–¥–∞–ª—è—é—á–∏ –∑–∞–π–≤—ñ –ø–µ—Ä–µ–Ω–æ—Å–∏;</li>
     *     <li>–æ–± º—î–¥–Ω—É—î —Ä—è–¥–∫–∏, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ –º–∞–ª–æ—ó –ª—ñ—Ç–µ—Ä–∏ –∞–±–æ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó, –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º —Ä—è–¥–∫–æ–º;</li>
     *     <li>–∑–∞–ª–∏—à–∞—î –ø–µ—Ä–µ–Ω–æ—Å–∏ –ª–∏—à–µ –ø–µ—Ä–µ–¥ —Ä—è–¥–∫–∞–º–∏, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏ / —Ü–∏—Ñ—Ä–∏.</li>
     * </ul>
     *
     * @param rawText —Å–∏—Ä–∏–π —Ç–µ–∫—Å—Ç —ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
     * @return –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ ¬´–∑–ª–∞–º–∞–Ω–∏—Ö¬ª –ø–µ—Ä–µ–Ω–æ—Å—ñ–≤
     */
    public String replaceText(@NotNull String rawText) {
        StringBuilder result = new StringBuilder();
        String[] rawLines = rawText.split("\\R+"); // —É—Å—ñ —Ç–∏–ø–∏ –ø–µ—Ä–µ–Ω–æ—Å—É —Ä—è–¥–∫–∞

        for (String rawLine : rawLines) {
            String current = rawLine.trim();
            if (current.isEmpty()) continue;
            char firstChar = current.charAt(0);

            if (!result.isEmpty()) {
                // —è–∫—â–æ —Ä—è–¥–æ–∫ –ø—Ä–æ–¥–æ–≤–∂—É—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∞–±–∑–∞—Ü
                if (Character.isLowerCase(firstChar) || ".;:".indexOf(firstChar) != -1) {
                    result.append(' ').append(current);
                } else {
                    result.append('\n').append(current);
                }
            } else {
                result.append(current);
            }
        }
        return result.toString();
    }
}
